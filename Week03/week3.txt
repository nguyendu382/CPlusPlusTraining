ðŸ§  Practice Exercises
ðŸ”¹ 1. Zoo Animal Management
Requirements:
Create abstract base class Animal with:

virtual void speak() const = 0 (pure virtual)

A virtual destructor (each animal say goodbye based on its type)

Derived classes:

Lion, Elephant, Monkey, each overriding speak()

Store a list of std::shared_ptr<Animal>

Iterate and call speak() using base class pointer â†’ demonstrate runtime polymorphism.

âœ… Bonus: Add a feed() function to show base class function call chaining.

ðŸ”¹ 2. Vehicle Management System
Requirements:
Base class: Vehicle

std::string brand, int year

virtual void displayInfo() const = 0

Derived classes:

Car: adds numberOfDoors

Truck: adds maxLoad

Demonstrate:

Inheritance & overriding displayInfo()

Accessing via std::vector<std::unique_ptr<Vehicle>>

Use override keyword

âœ… Bonus: Add a Garage class that has a list of vehicles (composition).

ðŸ”¹ 3. Polymorphism with Base Class Pointer
Instructions:
Create base class Shape with:

virtual double area() const = 0

Derived:

Circle, Rectangle, Triangle

In main():

Store std::vector<std::shared_ptr<Shape>>

Call area() in loop to calculate total area